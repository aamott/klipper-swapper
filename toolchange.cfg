# Script to change back to the main extruder


#TODO: Save and load current tool across reboots:
# See https://www.klipper3d.org/Config_Reference.html#save_variables

#############################
# Aliases
#############################
[gcode_macro T0]
gcode: 
    _T TOOL_ID=0
    
[gcode_macro T1]
gcode: 
    _T TOOL_ID=1

############################
# Configuration
############################
[gcode_macro _initialize_toolchanger]
# TODO: Move the extruder variables to variable_'s under each extruder section.
# It might only be possible to set variables inside macros. 
# for more info, see: https://www.klipper3d.org/Config_Reference.html#delayed_gcode
gcode:
    # load saved variables
    {% set svv = printer.save_variables.variables %}
    # {% set toolchanger = printer["gcode_macro initialize_toolchanger"] %} # TODO: Broken. How do we create an alias?

    # "extruder_name": extruder configuration name. i.e. "extruder"
    # "x" and "y": x and y positions to load tool
    # "y_clear": how far back the tool needs to be to clear the other tools in an x move
    # "x_offset", "y_offset", "z_offset": extruder nozzle offsets
    {% set tool_position = ([
        {"extruder_name": "extruder", "x": 187,"y": 2, "y_clear": 70, "x_offset":0, "y_offset":0, "z_offset":0}, #T0
        {"extruder_name": "extruder1", "x": 87,"y": 1, "y_clear": 60, "x_offset":7.7, "y_offset":0.9, "z_offset":1.4}, # bigger moves farther away. 1.85>target<1.95<2.15 #T1. Increase value to move farther to positive
    ] ) %}
    # The following line (saving a dict with a klipper variable) was obtained from:
    # https://klipper.discourse.group/t/macro-creation-tutorial/30/20
    SAVE_VARIABLE VARIABLE=tools VALUE="{tool_position | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    # SET_GCODE_VARIABLE MACRO=_initialize_toolchanger VARIABLE=tool_values VALUE="{tool_position | pprint | replace("\n", "") | replace("\"", "\\\"")}"

    # How far the tool should be from the lock
    # SET_GCODE_VARIABLE MACRO=_initialize_toolchanger VARIABLE=lock_clearance VALUE=10
    SAVE_VARIABLE VARIABLE=toolchanger_lock_clearance VALUE=20
    
    # how fast to move when loading/unloading a tool (in mm/minute)
    SAVE_VARIABLE VARIABLE=toolchanger_load_speed VALUE=2400
    SAVE_VARIABLE VARIABLE=toolchanger_travel_speed VALUE=6000
    SAVE_VARIABLE VARIABLE=toolchanger_z_speed VALUE=1000
    SAVE_VARIABLE VARIABLE=toolchanger_z_raise VALUE=7
    # how long to wait for servo to lock/unlock (in milliseconds)
    SAVE_VARIABLE VARIABLE=toolchanger_servo_delay VALUE=400
    SAVE_VARIABLE VARIABLE=toolchanger_servo_lock_angle VALUE=140
    SAVE_VARIABLE VARIABLE=toolchanger_servo_unlock_angle VALUE=17

    # load configuration
    ACTIVATE_EXTRUDER_BY_ID TOOL_ID={svv.current_extruder_id|default(0)}
    # T{svv.current_extruder_id|default(0)}



# Load the configuration and variables
[delayed_gcode toolchanger_setup]
gcode: _initialize_toolchanger
initial_duration: 0.4


[gcode_macro ACTIVATE_EXTRUDER_BY_ID]
gcode: 
    # alias
    {% set svv = printer.save_variables.variables %}

    # get params
    {% set tool_idx = params.TOOL_ID|default(0)|int %} # default to first tool

    # activate extruder
    ACTIVATE_EXTRUDER extruder={svv.tools[tool_idx].extruder_name}
    SAVE_VARIABLE VARIABLE=current_extruder_id VALUE={tool_idx}


[gcode_macro _T_UNLOAD_ANY] # Unload Tool
gcode:
    # alias
    {% set svv = printer.save_variables.variables %}

    _T_UNLOAD TOOL_ID={svv.current_extruder_id}


[gcode_macro _T]
gcode:
    # alias for printer save variables
    {% set svv = printer.save_variables.variables %}  
    # alias for the printer's coordinate origin (which holds the x, y, and z offsets)
    {% set origin = printer.gcode_move.homing_origin %}

    # get tool ID
    {% set new_tool_idx = params.TOOL_ID|default(0)|int %} # default to first tool

    # if the tool isn't loaded yet...
    {% if new_tool_idx|string() != svv.current_extruder_id|default(0)|string() %}

        # get new tool object
        {% set new_tool = svv.tools[new_tool_idx] %}

        #################
        # Save return position
        {% if (printer.toolhead.position.x|float + new_tool.x_offset|float >= printer.toolhead.axis_maximum.x|float) %} # new position would exceed max
            {% set return_x = printer.toolhead.axis_maximum.x|float - origin.x|float - 1 %}
        {% elif (printer.toolhead.position.x|float + new_tool.x_offset|float <= printer.toolhead.axis_minimum.x|float) %} # new position would exceed min
            {% set return_x = printer.toolhead.axis_minimum.x|float  - origin.x|float + 1 %}
        {% else %} # new position fits in workspace
            {% set return_x = printer.toolhead.position.x|float - origin.x|float %}
        {% endif %}
        # Set y return position
        {% if (printer.toolhead.position.y|float + new_tool.y_offset|float >= printer.toolhead.axis_maximum.y|float) %} # new position would exceed max
            {% set return_y = printer.toolhead.axis_maximum.y|float - origin.y|float - 1 %}
        {% elif (printer.toolhead.position.y|float + new_tool.y_offset|float <= printer.toolhead.axis_minimum.y|float) %} # new position would exceed min
            {% set return_y = printer.toolhead.axis_minimum.y|float - origin.y|float + 1 %}
        {% else %} # new position fits in workspace
            {% set return_y = printer.toolhead.position.y|float - origin.y|float %}
        {% endif %}

        #DEBUG
        # RESPOND TYPE=echo MSG='Saved position X{return_x} Y{return_y}'

        ###################
        # Prep Z (raise a little)
        G91 ; relative movement
        G1 Z{svv.toolchanger_z_raise} F{svv.toolchanger_z_speed}
        G90 ; absolute movement

        ###################
        # drop off old tool
        _T_UNLOAD_ANY


        ###################
        # Save state/offsets/speed and any other settings
        SAVE_GCODE_STATE NAME=ORIGINAL_PRINTER_STATE
        # set x and y offsets to 0 to prevent crashing while changing tool.
        SET_GCODE_OFFSET X=0 Y=0

        ###################
        # pick up new tool
        RESPOND TYPE=echo MSG='Loading tool {new_tool_idx}'

        # move to x load position, y prep position
        G1 X{new_tool.x} Y{svv.toolchanger_lock_clearance} F{svv.toolchanger_travel_speed}

        # move in y
        G1 Y{new_tool.y} F{svv.toolchanger_load_speed}

        # lock servo, wait, disable servo
        SET_SERVO SERVO=tool ANGLE={svv.toolchanger_servo_lock_angle|int} # release tool
        G4 P{svv.toolchanger_servo_delay} # wait for servo to get into position
        SET_SERVO SERVO=tool WIDTH=0 #turn servo off

        # return speed etc to original values
        RESTORE_GCODE_STATE NAME=ORIGINAL_PRINTER_STATE


        # set z offset and move z to position
        SET_GCODE_OFFSET Z_ADJUST={new_tool.z_offset} MOVE=1 MOVE_SPEED=30 # + printer.stepper_z.position_endstop|float}


        # Save speed to load variable
        SAVE_GCODE_STATE NAME=LOAD_SPEED_STATE

        # Back out to y clear position and activate the extruder
        G1 Y{new_tool.y_clear} F{svv.toolchanger_load_speed}
        ACTIVATE_EXTRUDER_BY_ID TOOL_ID={new_tool_idx}

        # return speed etc to original values
        RESTORE_GCODE_STATE NAME=LOAD_SPEED_STATE


        # Apply final x/y offsets
        SET_GCODE_OFFSET X={new_tool.x_offset} Y={new_tool.y_offset} 


        ##############################
        # return to previous position
        SAVE_GCODE_STATE NAME=NEW_SPEED_STATE

        RESPOND TYPE=echo MSG='Returning to position X{return_x} Y{return_y}'

        # Return X and Y
        G1 X{return_x} Y {return_y} F{svv.toolchanger_travel_speed}
        # Return Z
        G91 ; relative movement
        G1 Z-{svv.toolchanger_z_raise} F{svv.toolchanger_z_speed}
        G90 ; absolute movement

        RESTORE_GCODE_STATE NAME=NEW_SPEED_STATE

    {% else %}
        RESPOND TYPE=error MSG='Tool {new_tool_idx} already loaded'
    {% endif %}


[gcode_macro _T_UNLOAD] 
gcode:
    # alias for printer save variables
    {% set svv = printer.save_variables.variables %}    

    # load selected tool ID
    {% set tool_idx = params.TOOL_ID|default(0)|int %} # default to first tool

    # check that the tool being unloaded is actually loaded
    {% if svv.current_extruder_id|int == tool_idx %}
        RESPOND TYPE=echo MSG='Unloading tool {tool_idx}'

        SAVE_GCODE_STATE NAME=UNLOAD_STATE_T

        # temporarily unapply any x/y offsets to prevent crashing while changing tool.
        SET_GCODE_OFFSET X=0 Y=0

        # load tool object
        {% set tool = svv.tools[tool_idx] %}

        ###################
        # unload tool

        # move to x unload position, y prep position
        G1 X{tool.x} Y{tool.y_clear} F{svv.toolchanger_travel_speed}

        # put tool in its mount
        G1 Y{tool.y} F{svv.toolchanger_load_speed}

        # unlock servo, wait, turn off servo
        SET_SERVO SERVO=tool ANGLE={svv.toolchanger_servo_unlock_angle|int} # release tool
        G4 P{svv.toolchanger_servo_delay} # wait for servo to get into position
        SET_SERVO SERVO=tool WIDTH=0 #turn servo off

        # back out y from the lock
        G1 Y{svv.toolchanger_lock_clearance} F{svv.toolchanger_load_speed}


        RESTORE_GCODE_STATE NAME=UNLOAD_STATE_T

        # Unapply any offsets
        # SET_GCODE_OFFSET X_ADJUST=-{tool.x_offset} Y_ADJUST=-{tool.y_offset} MOVE=0 # CHANGED from setting offsets to 0
        SET_GCODE_OFFSET X=0 Y=0
        SET_GCODE_OFFSET Z_ADJUST=-{tool.z_offset} MOVE=1 MOVE_SPEED=40


    {% else %}
        RESPOND TYPE=error MSG='Unable to unload Tool {tool_idx}: not loaded'
    {% endif %}



#########################
# Offsets
# 
# Tape a pin to the bed and position 
# the main extruder directly over it.
# Note the position with M114 and put it
# in the xy_calibrate_position variables.
# Next, load the new extruder and run
# this macro. Adjust the position as
# necessary then run the 'get_new_offset'
# macro to see the new offsets. 
# Put the new offsets in the tool
# configuration.

# switch to tool 0
# position toolhead directly over the pin
# run xy_calibrate_position
# raise 10mm
# switch tools
# position toolhead directly over the pin
# lower appropriate amount (may be less than 10mm!)
# run set_new_offset
# set new offsets in the configuration
# set exact z offset for new nozzle
#########################
[gcode_macro xy_calibrate_position]
variable_x_pos: 19.1
variable_y_pos: 78.5
variable_z_pos: 12.2
# variable_speed: 100 # in mm/s
# variable_z_speed: 30 # in mm/s
gcode:
    SAVE_GCODE_STATE NAME=CALIBRATE_POS_STATE


    # store current position
    SET_GCODE_OFFSET X=0 Y=0 Z=0 # TODO: Does probe or stepper_z position_endstop need to applied while setting z offset?s
    SET_GCODE_VARIABLE MACRO=xy_calibrate_position VARIABLE=x_pos VALUE={printer.toolhead.position.x|float}
    SET_GCODE_VARIABLE MACRO=xy_calibrate_position VARIABLE=y_pos VALUE={printer.toolhead.position.y|float}
    SET_GCODE_VARIABLE MACRO=xy_calibrate_position VARIABLE=z_pos VALUE={printer.toolhead.position.z|float}

    RESTORE_GCODE_STATE NAME=CALIBRATE_POS_STATE

[gcode_macro set_new_offset]
##########################
# Run this macro once the 
# tool offset seems right. 
gcode:
    {% set svv = printer.save_variables.variables %}

    SET_GCODE_OFFSET X=0 Y=0 Z=0

    # calculate new offset
    {% set x_offset = printer["gcode_macro xy_calibrate_position"].x_pos|float - printer.toolhead.position.x|float %}
    {% set y_offset = printer["gcode_macro xy_calibrate_position"].y_pos|float - printer.toolhead.position.y|float %}
    {% set z_offset = printer["gcode_macro xy_calibrate_position"].z_pos|float - printer.toolhead.position.z|float %}

    RESPOND TYPE=echo MSG='Set the following offsets for Tool {svv.current_extruder_id}: X:{x_offset}, Y:{y_offset}, Z(approximate):{z_offset}'

    # apply new offset
    SET_GCODE_OFFSET X={x_offset} Y={y_offset}